const { MongoClient, ObjectId } = require('mongodb');
const bcrypt = require('bcrypt');

// MongoDB connection helper
async function getMongoClient() {
  const client = new MongoClient(process.env.DATABASE_URL || 'mongodb://localhost:27017/e-visa');
  await client.connect();
  return client;
}

async function setupDemo() {
  console.log('üöÄ Configuration de l\'environnement de d√©monstration...\n');

  try {
    const client = await getMongoClient();
    const db = client.db('e-visa');
    const users = db.collection('User');
    const visaTypes = db.collection('VisaType');

    // 1. Cr√©er un admin
    console.log('1Ô∏è‚É£ Cr√©ation de l\'administrateur...');
    const adminPassword = await bcrypt.hash('admin123', 10);
    
    // Check if admin exists
    let admin = await users.findOne({ email: 'admin@evisa.mr' });
    
    if (!admin) {
      const adminResult = await users.insertOne({
        email: 'admin@evisa.mr',
        name: 'Admin E-Visa',
        password: adminPassword,
        role: 'admin',
        createdAt: new Date(),
      });
      admin = { _id: adminResult.insertedId, email: 'admin@evisa.mr' };
      console.log('   ‚úÖ Admin cr√©√©:', admin.email);
    } else {
      // Update role if exists
      await users.updateOne(
        { _id: admin._id },
        { $set: { role: 'admin' } }
      );
      console.log('   ‚úÖ Admin mis √† jour:', admin.email);
    }

    // 2. Cr√©er quelques utilisateurs de test
    console.log('\n2Ô∏è‚É£ Cr√©ation d\'utilisateurs de test...');
    const userPassword = await bcrypt.hash('user123', 10);
    
    const testUsers = [];
    for (let i = 1; i <= 3; i++) {
      const email = `user${i}@example.com`;
      
      // Check if user exists
      let user = await users.findOne({ email });
      
      if (!user) {
        const userResult = await users.insertOne({
          email,
          name: `User ${i}`,
          password: userPassword,
          role: 'user',
          createdAt: new Date(),
        });
        user = { _id: userResult.insertedId, email };
        console.log(`   ‚úÖ Utilisateur ${i} cr√©√©:`, user.email);
      } else {
        console.log(`   ‚úì  Utilisateur ${i} existe d√©j√†:`, user.email);
      }
      testUsers.push(user);
    }

    // 3. Cr√©er des types de visa
    console.log('\n3Ô∏è‚É£ Cr√©ation des types de visa...');
    
    // V√©rifier si les types existent d√©j√†
    const existingTouristVisa = await visaTypes.findOne({ name: 'Visa Touristique' });
    const existingBusinessVisa = await visaTypes.findOne({ name: 'Visa Affaires' });
    
    const newVisaTypes = [];
    
    if (!existingTouristVisa) {
      const touristVisaResult = await visaTypes.insertOne({
        name: 'Visa Touristique',
        durationDays: 30,
        price: 50,
        description: 'Visa pour s√©jour touristique de 30 jours',
        active: true,
      });
      newVisaTypes.push({ _id: touristVisaResult.insertedId, name: 'Visa Touristique' });
      console.log('   ‚úÖ Visa Touristique cr√©√©');
    } else {
      console.log('   ‚úì  Visa Touristique existe d√©j√†');
    }
    
    if (!existingBusinessVisa) {
      const businessVisaResult = await visaTypes.insertOne({
        name: 'Visa Affaires',
        durationDays: 90,
        price: 100,
        description: 'Visa pour voyages d\'affaires de 90 jours',
        active: true,
      });
      newVisaTypes.push({ _id: businessVisaResult.insertedId, name: 'Visa Affaires' });
      console.log('   ‚úÖ Visa Affaires cr√©√©');
    } else {
      console.log('   ‚úì  Visa Affaires existe d√©j√†');
    }
    
    console.log(`   üìä ${newVisaTypes.length} nouveau(x) type(s) de visa`);

    console.log('\n‚úÖ Configuration termin√©e avec succ√®s !\n');
    console.log('üìù Informations de connexion:');
    console.log('   Admin:');
    console.log('   - Email: admin@evisa.mr');
    console.log('   - Mot de passe: admin123');
    console.log('\n   Utilisateurs:');
    console.log('   - Email: user1@example.com');
    console.log('   - Email: user2@example.com');
    console.log('   - Email: user3@example.com');
    console.log('   - Mot de passe pour tous: user123');
    console.log('\nüéâ Vous pouvez maintenant tester l\'application !');
    console.log('   1. npm run dev');
    console.log('   2. Connectez-vous avec admin@evisa.mr / admin123');
    console.log('   3. Acc√©dez √† /admin pour le dashboard\n');

  } catch (error) {
    console.error('‚ùå Erreur lors de la configuration:', error.message);
    process.exit(1);
  } finally {
    await client.close();
  }
}

setupDemo();

