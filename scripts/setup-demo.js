const { PrismaClient } = require('@prisma/client');
const bcrypt = require('bcrypt');

const prisma = new PrismaClient();

async function setupDemo() {
  console.log('üöÄ Configuration de l\'environnement de d√©monstration...\n');

  try {
    // 1. Cr√©er un admin
    console.log('1Ô∏è‚É£ Cr√©ation de l\'administrateur...');
    const adminPassword = await bcrypt.hash('admin123', 10);
    
    const admin = await prisma.user.upsert({
      where: { email: 'admin@evisa.mr' },
      update: { role: 'admin' },
      create: {
        email: 'admin@evisa.mr',
        name: 'Admin E-Visa',
        password: adminPassword,
        role: 'admin',
        createdAt: new Date(),
      },
    });
    console.log('   ‚úÖ Admin cr√©√©:', admin.email);

    // 2. Cr√©er quelques utilisateurs de test
    console.log('\n2Ô∏è‚É£ Cr√©ation d\'utilisateurs de test...');
    const userPassword = await bcrypt.hash('user123', 10);
    
    const users = [];
    for (let i = 1; i <= 3; i++) {
      const user = await prisma.user.upsert({
        where: { email: `user${i}@example.com` },
        update: {},
        create: {
          email: `user${i}@example.com`,
          name: `User ${i}`,
          password: userPassword,
          role: 'user',
          createdAt: new Date(),
        },
      });
      users.push(user);
      console.log(`   ‚úÖ Utilisateur ${i} cr√©√©:`, user.email);
    }

    // 3. Cr√©er des types de visa
    console.log('\n3Ô∏è‚É£ Cr√©ation des types de visa...');
    
    // V√©rifier si les types existent d√©j√†
    const existingTouristVisa = await prisma.visaType.findFirst({
      where: { name: 'Visa Touristique' }
    });
    
    const existingBusinessVisa = await prisma.visaType.findFirst({
      where: { name: 'Visa Affaires' }
    });
    
    const visaTypes = [];
    
    if (!existingTouristVisa) {
      const touristVisa = await prisma.visaType.create({
        data: {
          name: 'Visa Touristique',
          durationDays: 30,
          price: 50,
          description: 'Visa pour s√©jour touristique de 30 jours',
          active: true,
        },
      });
      visaTypes.push(touristVisa);
      console.log('   ‚úÖ Visa Touristique cr√©√©');
    } else {
      console.log('   ‚úì  Visa Touristique existe d√©j√†');
    }
    
    if (!existingBusinessVisa) {
      const businessVisa = await prisma.visaType.create({
        data: {
          name: 'Visa Affaires',
          durationDays: 90,
          price: 100,
          description: 'Visa pour voyages d\'affaires de 90 jours',
          active: true,
        },
      });
      visaTypes.push(businessVisa);
      console.log('   ‚úÖ Visa Affaires cr√©√©');
    } else {
      console.log('   ‚úì  Visa Affaires existe d√©j√†');
    }
    
    console.log(`   üìä ${visaTypes.length} nouveau(x) type(s) de visa`);

    console.log('\n‚úÖ Configuration termin√©e avec succ√®s !\n');
    console.log('üìù Informations de connexion:');
    console.log('   Admin:');
    console.log('   - Email: admin@evisa.mr');
    console.log('   - Mot de passe: admin123');
    console.log('\n   Utilisateurs:');
    console.log('   - Email: user1@example.com');
    console.log('   - Email: user2@example.com');
    console.log('   - Email: user3@example.com');
    console.log('   - Mot de passe pour tous: user123');
    console.log('\nüéâ Vous pouvez maintenant tester l\'application !');
    console.log('   1. npm run dev');
    console.log('   2. Connectez-vous avec admin@evisa.mr / admin123');
    console.log('   3. Acc√©dez √† /admin pour le dashboard\n');

  } catch (error) {
    console.error('‚ùå Erreur lors de la configuration:', error.message);
    process.exit(1);
  } finally {
    await prisma.$disconnect();
  }
}

setupDemo();

