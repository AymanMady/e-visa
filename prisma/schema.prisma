// schema.prisma
generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL") // ex: mongodb+srv://user:pass@cluster0.mongodb.net/mydb?retryWrites=true&w=majority
}

model User {
  id            String           @id @map("_id") @default(auto()) @db.ObjectId
  email         String?          @unique
  emailVerified DateTime?
  name          String?
  password      String?
  image         String?
  role          String           @default("user") // "user" or "admin"
  createdAt     DateTime         @default(now())
  lastLogin     DateTime?
  applications  VisaApplication[]
  accounts      Account[]
  sessions      Session[]
}

model Account {
  id                String  @id @map("_id") @default(auto()) @db.ObjectId
  userId            String  @db.ObjectId
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.String
  access_token      String? @db.String
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.String
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @map("_id") @default(auto()) @db.ObjectId
  sessionToken String   @unique
  userId       String   @db.ObjectId
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  id         String   @id @map("_id") @default(auto()) @db.ObjectId
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Agent {
  id        String          @id @map("_id") @default(auto()) @db.ObjectId
  firstName String
  lastName  String
  email     String?         @unique
  role      String?
  active    Boolean         @default(true)
  histories StatusHistory[]
}

model VisaType {
  id           String           @id @map("_id") @default(auto()) @db.ObjectId
  name         String
  durationDays Int
  price        Float
  description  String?
  active       Boolean          @default(true)
  applications VisaApplication[]
}

model VisaApplication {
  id                 String           @id @map("_id") @default(auto()) @db.ObjectId
  user               User?            @relation(fields: [userId], references: [id])
  userId             String?          @db.ObjectId
  visaType           VisaType?        @relation(fields: [visaTypeId], references: [id])
  visaTypeId         String?          @db.ObjectId
  applicationNumber  String           @unique
  status             String
  createdAt          DateTime         @default(now())
  updatedAt          DateTime?        @updatedAt
  submittedAt        DateTime?
  processedAt        DateTime?
  approvedAt         DateTime?

  generalInfo        GeneralInfo?
  passportInfo       PassportInfo?
  travelerInfo       TravelerInfo?
  photo              Photo?
  documents          Document[]
  histories          StatusHistory[]
  payments           Payment[]
}
model GeneralInfo {
  id                  String         @id @map("_id") @default(auto()) @db.ObjectId
  application         VisaApplication? @relation(fields: [applicationId], references: [id])
  applicationId       String?        @unique @db.ObjectId
  email               String?
  phone               String?
  travelPurpose       String?
  arrivalDate         DateTime?
  numberOfEntries     Int?
  addressInMauritania String?
  purposeDescription  String?
}

model PassportInfo {
  id            String         @id @map("_id") @default(auto()) @db.ObjectId
  application   VisaApplication? @relation(fields: [applicationId], references: [id])
  applicationId String?        @unique @db.ObjectId
  documentNumber String
  documentType   String?
  issueDate      DateTime?
  expiryDate     DateTime?
  placeOfIssue   String?
}

model TravelerInfo {
  id            String         @id @map("_id") @default(auto()) @db.ObjectId
  application   VisaApplication? @relation(fields: [applicationId], references: [id])
  applicationId String?        @unique @db.ObjectId
  title         String?
  gender        String?
  firstName     String
  lastName      String
  birthDate     DateTime?
  birthPlace    String?
  nationality   String?
  occupation    String?
}

model Photo {
  id            String         @id @map("_id") @default(auto()) @db.ObjectId
  application   VisaApplication? @relation(fields: [applicationId], references: [id])
  applicationId String?        @unique @db.ObjectId
  fileName      String
  filePath      String
  sizeKb        Int?
  mimeType      String?
  uploadDate    DateTime       @default(now())
  valid         Boolean        @default(false)
}


model Document {
  id            String         @id @map("_id") @default(auto()) @db.ObjectId
  application   VisaApplication? @relation(fields: [applicationId], references: [id])
  applicationId String?        @db.ObjectId
  documentType  String?
  fileName      String
  filePath      String
  sizeKb        Int?
  mimeType      String?
  uploadDate    DateTime       @default(now())
  valid         Boolean        @default(false)
}

model StatusHistory {
  id            String         @id @map("_id") @default(auto()) @db.ObjectId
  application   VisaApplication? @relation(fields: [applicationId], references: [id])
  applicationId String?        @db.ObjectId
  previousStatus String?
  newStatus      String
  changeDate     DateTime      @default(now())
  agent         Agent?         @relation(fields: [agentId], references: [id])
  agentId        String?        @db.ObjectId
  comment        String?
}

model Payment {
  id                   String         @id @map("_id") @default(auto()) @db.ObjectId
  application          VisaApplication? @relation(fields: [applicationId], references: [id])
  applicationId        String?        @db.ObjectId
  amount               Float
  currency             String
  paymentMethod        String
  paymentStatus        String
  transactionReference String?
  paymentDate          DateTime?      @default(now())
}
